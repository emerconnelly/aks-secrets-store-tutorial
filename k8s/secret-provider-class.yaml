# the Kubernetes secret will NOT BE CREATED until it's mounted in a volumeMount
# create SecretProviderClass > in pod, create volume using SecretProviderClass > in container of pod, create volumeMount > use secret in container
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: demo-web-app # the name of the SecretProviderClass, used in volume.csi.volumeAttributes of the pod manifest
  namespace: demo-web-app # must be the same namespace where the secret is used
spec:
  provider: azure
  parameters:
    cloudName: "" # leave blank
    usePodIdentity: "false" # leave blank
    useVMManagedIdentity: "true" # leave true, this cluster uses Microsoft Entra Workload ID: learn.microsoft.com/en-us/azure/aks/workload-identity-overview
    # replace with Terraform ouput aks_identity_tenant_id>
    tenantId: 8ac76c91-e7f1-41ff-a89c-3553b2da2c17
    # replace with Terraform ouput key_vault_name
    keyvaultName: akssecretsstoretutorial2 # the name of the Azure Key Vault to pull secrets from
    # replace with Terraform ouput aks_key_vault_identity_client_id
    userAssignedIdentityID: b75cf3e5-94c0-4fef-a33e-48f55a715c6c # in this cluster's managed resource group is a managed identity: "azurekeyvaultsecretsprovider-<cluster-name>"
    objects: |
      array:
        - |
          objectName: sql-connection-string
          objectType: secret
          objectVersion: ""
    # objectName is the name of the secret in the Azure Key Vault
  secretObjects:
  - data:
    - key: PROGET_SQL_CONNECTION_STRING # the name of the key to be created inside of the Kubernetes secret to be created
      objectName: sql-connection-string # the name of the Azure Key Vault secret, defined above in spec.parameters.objects
    secretName: sql-connection-string # the name of the Kubernetes secret to be created
    type: Opaque # the type of Kubernetes secret to be created
